---
name: Reusable workflow

on:
  workflow_call:
    inputs:
      artifact-path: 
        description: 'feed path from caller workflows'
        required: true
        type: string
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  ARTIFACTORY_API_KEY: ${{ secrets.ARTIFACTORY_API_KEY }} # store Artifactory API key in Secrets
  INPUT_ARTIFACT_PATH: ${{ inputs.artifact-path}}
  RELEASE_PATH: add/path/here/to/upload
  ARTIFACTORY_URL: https://your-org-jfrog-url

jobs:

  build:
    runs-on: ubuntu-latest # add your runner label

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set-up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Tarball of Artifacts
        id: tar
        shell: python
        run: |
          import os
          import tarfile
          import logging

          log = logging.getLogger()
          log.setLevel(logging.DEBUG)

          console = logging.StreamHandler()
          log.addHandler(console)

          RELEASE_NAME = os.path.basename(os.environ["GITHUB_REPOSITORY"])
          TAG_NAME = ${{ github.run_number }}
          ARTIFACT_NAME = f"{RELEASE_NAME}-{TAG_NAME}.tar.gz"

          with tarfile.open(ARTIFACT_NAME, "w:gz") as tar:
              log.info(f"Compressing files into: {ARTIFACT_NAME}")
              tar.add(".", arcname=os.path.basename("."))

      - name: Publish to Artylab
        id: deploy
        shell: python
        run: |
          import os
          import requests
          import logging
          import sys

          log = logging.getLogger()
          log.setLevel(logging.DEBUG)

          console = logging.StreamHandler()
          log.addHandler(console)
          
          RELEASE_NAME = os.path.basename(os.environ["GITHUB_REPOSITORY"])
          TAG_NAME = ${{ github.run_number }}
          ARTIFACT_NAME = f"{RELEASE_NAME}-{TAG_NAME}.tar.gz"
          
          ARTIFACTORY_URL= os.getenv("ARTIFACTORY_URL")
          RELEASE_PATH = os.getenv("RELEASE_PATH")
          ARTIFACT_PATH = os.getenv("INPUT_ARTIFACT_PATH")

          artylab_url = f"{ARTIFACTORY_URL}/{RELEASE_PATH}/{ARTIFACT_PATH}/{ARTIFACT_NAME}"

          ARTIFACTORY_API_KEY = os.getenv("ARTIFACTORY_API_KEY")

          headers = {"X-JFrog-Art-Api": ARTIFACTORY_API_KEY, "Content-Type": "application/gzip"}

          with open(ARTIFACT_NAME, "rb") as f:
            response = requests.put(artylab_url, headers=headers, data=f)

          log.info(f"uploading Artifacts of {RELEASE_NAME}")
          log.info("............")
          log.info(".......")

          if response.status_code == 201:
              log.info(f"Artifact {ARTIFACT_NAME} uploaded successfully at {RELEASE_PATH}/{ARTIFACT_PATH}")
          elif response.status_code in [409, 403]:
              log.error(f"{ARTIFACT_NAME} already exists at {RELEASE_PATH}/{ARTIFACT_PATH}, Not enough permissions to overwrite artifact. Please run the job manually instead of re-run")
#              if response.status_code == 403:
#                sys.exit(1)  # add this to fail workflow here if error appears
          else:
              log.error(f"Failed to upload artifact. Status code: {response.status_code}")
              log.info(response.text)
              